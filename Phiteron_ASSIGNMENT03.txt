TASK01
Same or Not
#include <bits/stdc++.h>
using namespace std;
int main()
{
    int N, M;
    cin >> N >> M;

    stack<int> myStack;
    queue<int> q;
    for (int i = 0; i < N; ++i) {
        int value;
        cin >> value;
        myStack.push(value);
    }
    for (int i = 0; i < M; ++i) {
        int value;
        cin >> value;
        q.push(value);
    }
    if (N != M) {
        cout << "NO" << endl;
        return 0;
    }
    while (!myStack.empty() && !q.empty()) {
        if (myStack.top() != q.front()) {
            cout << "NO" << endl;
            return 0;
        }
        myStack.pop();
        q.pop();
    }
    cout << "YES" << endl;
    return 0;
}
TASK02
Same or not 2
But without STL
#include <iostream>
using namespace std;
class Node {
public:
    int val;
    Node* next;
    Node* prev;
    Node(int val) {
        this->val = val;
        this->next = NULL;
        this->prev = NULL;
    }
};
class myStack {
private:
    Node* head = NULL;
    Node* tail = NULL;
public:
    void push(int val) {
        Node* newNode = new Node(val);
        if (head == NULL) {
            head = tail = newNode;
            return;
        }
        tail->next = newNode;
        newNode->prev = tail;
        tail = newNode;
    }
    int pop() {
        if (tail == NULL) return -1; // Stack is empty
        int value = tail->val;
        Node* deleteNode = tail;
        tail = tail->prev;
        if (tail) tail->next = NULL;
        else head = NULL; // Stack becomes empty
        delete deleteNode;
        return value;
    }
    int top() {
        return (tail != NULL) ? tail->val : -1;
    }
    bool empty() {
        return head == NULL;
    }
};
class myQueue {
private:
    Node* head = NULL;
    Node* tail = NULL;
public:
    void push(int val) {
        Node* newNode = new Node(val);
        if (head == NULL) {
            head = tail = newNode;
            return;
        }
        tail->next = newNode;
        newNode->prev = tail;
        tail = newNode;
    }
    int pop() {
        if (head == NULL) return -1; // Queue is empty
        int value = head->val;
        Node* deleteNode = head;
        head = head->next;
        if (head) head->prev = NULL;
        else tail = NULL; // Queue becomes empty
        delete deleteNode;
        return value;
    }
    int front() {
        return (head != NULL) ? head->val : -1;
    }
    bool empty() {
        return head == NULL;
    }
};
int main() {
    int N, M;
    cin >> N >> M;
    myStack stk;
    myQueue q;
    for (int i = 0; i < N; i++) {
        int val;
        cin >> val;
        stk.push(val);
    }
    for (int i = 0; i < M; i++) {
        int val;
        cin >> val;
        q.push(val);
    }
    if (N != M) {
        cout << "NO" << endl;
        return 0;
    }
    while (!stk.empty() && !q.empty()) {
        if (stk.pop() != q.pop()) {
            cout << "NO" << endl;
            return 0;
        }
    }
    cout << "YES" << endl;
    return 0;
}
TASK03
Is it Valid
#include <bits/stdc++.h>
using namespace std;
bool isValidString(const string& s) {
    stack<char> st;
    for(char c : s){
        if(!st.empty() && ((c == '0' && st.top() == '1') || (c == '1' && st.top() == '0'))){
            st.pop(); 
        } 
        else{
            st.push(c); 
        }
    }
    return st.empty(); 
}
int main(){
    int T;
    cin >> T;
    while (T--){
        string S;
        cin >> S;
        if(isValidString(S)){
            cout << "YES" << endl;
        } 
        else{
            cout << "NO" << endl;
        }
    }
    return 0;
}
TASK04
Special Queries
#include <bits/stdc++.h>
using namespace std;
int main()
{
    int Q;
    cin >> Q;
    queue<string> line;
    while (Q--){
        int count;
        cin >> count;

        if(count == 0){
            string name;
            cin >> name;
            line.push(name);
        } 
        else if(count == 1){
            if(!line.empty()){
                cout << line.front() << endl;
                line.pop();
            } 
            else{
                cout << "Invalid" << endl;
            }
        }
    }
    return 0;
}
TASK05
Elimination
#include <bits/stdc++.h>
using namespace std;
bool IsItEmpty(const string &s){
    stack<char> st;
    for(char c : s){
        if(!st.empty() && ((st.top() == '0' && c == '1') || (st.top() == '1' && c == '0'))){
            st.pop(); 
        } else {
            st.push(c); 
        }
    }
    return st.empty();
}
int main(){
    int T;
    cin >> T;
    while(T--){
        string s;
        cin >> s;
        if(IsItEmpty(s)){
            cout << "YES" << endl;
        } 
        else{
            cout << "NO" << endl;
        }
    }
    return 0;
}

TASK01
SUM WITHOUT LEAF
#include <bits/stdc++.h>
using namespace std;
struct TreeNode {
    int val;
    TreeNode *left, *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};
TreeNode* buildTree(vector<int>& values) {
    if (values.empty() || values[0] == -1) return NULL;    
    queue<TreeNode*> q;
    TreeNode* root = new TreeNode(values[0]);
    q.push(root);    
    int i = 1;
    while (!q.empty() && i < values.size()) {
        TreeNode* current = q.front();
        q.pop();        
        if (values[i] != -1) {
            current->left = new TreeNode(values[i]);
            q.push(current->left);
        }
        i++;       
        if (i < values.size() && values[i] != -1) {
            current->right = new TreeNode(values[i]);
            q.push(current->right);
        }
        i++;
    }
    return root;
}
int sumNonLeafNodes(TreeNode* root) {
    if (!root) return 0;   
    queue<TreeNode*> q;
    q.push(root);
    int sum = 0;   
    while (!q.empty()) {
        TreeNode* current = q.front();
        q.pop();
        if (current->left || current->right) {
            sum += current->val;
        }       
        if (current->left) q.push(current->left);
        if (current->right) q.push(current->right);
    }
    return sum;
}
void deleteTree(TreeNode* root) {
    if (!root) return;
    deleteTree(root->left);
    deleteTree(root->right);
    delete root;
}
int main() {
    vector<int> values;
    int val;
    while (cin >> val) {
        values.push_back(val);
    }  
    TreeNode* root = buildTree(values);
    cout << sumNonLeafNodes(root) << endl;
    deleteTree(root);   
    return 0;
}
TASK02
LEAF NODES 
#include <bits/stdc++.h>
using namespace std;
struct TreeNode {
    int val;
    TreeNode *left, *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};
TreeNode* buildTree(vector<int>& values) {
    if (values.empty() || values[0] == -1) return NULL;    
    queue<TreeNode*> q;
    TreeNode* root = new TreeNode(values[0]);
    q.push(root);    
    int i = 1;
    while (!q.empty() && i < values.size()) {
        TreeNode* current = q.front();
        q.pop();        
        if (values[i] != -1) {
            current->left = new TreeNode(values[i]);
            q.push(current->left);
        }
        i++;       
        if (i < values.size() && values[i] != -1) {
            current->right = new TreeNode(values[i]);
            q.push(current->right);
        }
        i++;
    }
    return root;
}
vector<int> getLeafNodes(TreeNode* root) {
    if (!root) return {};    
    queue<TreeNode*> q;
    q.push(root);
    vector<int> leafNodes;  
    while (!q.empty()) {
        TreeNode* current = q.front();
        q.pop();
        if (!current->left && !current->right) {
            leafNodes.push_back(current->val);
        }       
        if (current->left) q.push(current->left);
        if (current->right) q.push(current->right);
    }    
    sort(leafNodes.rbegin(), leafNodes.rend()); // Sort in descending order
    return leafNodes;
}
int main() {
    vector<int> values;
    int val;
    while (cin >> val) {
        values.push_back(val);
    }    
    TreeNode* root = buildTree(values);
    vector<int> leafNodes = getLeafNodes(root);
    
    for (int num : leafNodes) {
        cout << num << " ";
    }
    cout << endl;    
    return 0;
}
TASK03
PEEFECT BINARY TREE
#include <bits/stdc++.h>
using namespace std;
struct TreeNode {
    int val;
    TreeNode *left, *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};
TreeNode* buildTree(vector<int>& values) {
    if (values.empty() || values[0] == -1) return NULL;   
    queue<TreeNode*> q;
    TreeNode* root = new TreeNode(values[0]);
    q.push(root);    
    int i = 1;
    while (!q.empty() && i < values.size()) {
        TreeNode* current = q.front();
        q.pop();       
        if (values[i] != -1) {
            current->left = new TreeNode(values[i]);
            q.push(current->left);
        }
        i++;       
        if (i < values.size() && values[i] != -1) {
            current->right = new TreeNode(values[i]);
            q.push(current->right);
        }
        i++;
    }
    return root;
}
int getDepth(TreeNode* root) {
    if (!root) return 0;
    return 1 + max(getDepth(root->left), getDepth(root->right));
}
int countNodes(TreeNode* root) {
    if (!root) return 0;
    return 1 + countNodes(root->left) + countNodes(root->right);
}
bool isPerfectBinaryTree(TreeNode* root) {
    if (!root) return true;    
    int depth = getDepth(root);
    int nodeCount = countNodes(root);   
    return nodeCount == (1 << depth) - 1; 
}
int main() {
    vector<int> values;
    int val;
    while (cin >> val) {
        values.push_back(val);
    }   
    TreeNode* root = buildTree(values);
    cout << (isPerfectBinaryTree(root) ? "YES" : "NO") << endl;   
    return 0;
}
TASK04
LEVEL NODES 
#include <bits/stdc++.h>
using namespace std;
class TreeNode {
    public:
    int val;
    TreeNode *left, *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};
TreeNode* buildTree(vector<int>& values) {
    if (values.empty() || values[0] == -1) return NULL;    
    queue<TreeNode*> q;
    TreeNode* root = new TreeNode(values[0]);
    q.push(root);   
    int i = 1;
    while (!q.empty() && i < values.size()) {
        TreeNode* current = q.front();
        q.pop();       
        if (values[i] != -1) {
            current->left = new TreeNode(values[i]);
            q.push(current->left);
        }
        i++;       
        if (i < values.size() && values[i] != -1) {
            current->right = new TreeNode(values[i]);
            q.push(current->right);
        }
        i++;
    }
    return root;
}
void printLevel(TreeNode* root, int X) {
    if (!root) {
        cout << "Invalid" << endl;
        return;
    }   
    queue<TreeNode*> q;
    q.push(root);
    int level = 0;    
    while (!q.empty()) {
        int levelSize = q.size();       
        if (level == X) {
            for (int i = 0; i < levelSize; i++) {
                TreeNode* current = q.front();
                q.pop();
                cout << current->val << " ";
            }
            cout << endl;
            return;
        }        
        for (int i = 0; i < levelSize; i++) {
            TreeNode* current = q.front();
            q.pop();            
            if (current->left) q.push(current->left);
            if (current->right) q.push(current->right);
        }      
        level++;
    }   
    cout << "Invalid" << endl;
}
int main() {
    vector<int> values;
    int val;
    while (cin >> val) {
        values.push_back(val);
    }   
    int X = values.back(); 
    values.pop_back();    
    TreeNode* root = buildTree(values);
    printLevel(root, X);   
    return 0;
}
TASK05

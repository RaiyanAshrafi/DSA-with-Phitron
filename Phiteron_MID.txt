TASK01
Duplicate remove
#include <bits/stdc++.h>
using namespace std;
int main(){
    list<int> myList;
    int value;
    while(cin >> value && value!=-1){
        myList.push_back(value);
    }
    myList.sort();
    myList.unique();
    for(int val : myList){ 
        cout << val << " ";
    }
    return 0;
}
TASK02
Palindrome Check
#include <bits/stdc++.h>
using namespace std;
class Node{
public:
    int value;
    Node* prev;
    Node* next;
    Node(int value){
        this->value = value;
        prev = NULL;
        next = NULL;
    }
};
class myDoublyList{
public:
    Node* head;
    Node* tail;
    myDoublyList(){
        head = NULL;
        tail = NULL;
    }
    bool isPalindrome(){
        if(!head || !head->next){
            return true; 
        }
        Node* left = head;
        Node* right = tail;
        while(left != right && left->prev != right){
            if(left->value != right->value){
                return false;
            }
            left = left->next;
            right = right->prev;
        }
        return true;
    }
};
int main(){
    myDoublyList now;
    int value;
    while(cin >> value && value != -1){
        Node* newNode = new Node(value);
        if(!now.head){
            now.head = newNode;
            now.tail = newNode;
        } 
        else{
            now.tail->next = newNode;
            newNode->prev = now.tail;
            now.tail = newNode;
        }
    }
    if(now.isPalindrome()){
        cout << "YES" << endl;
    } 
    else{
        cout << "NO" << endl;
    }
    return 0;
}
TASK03
Browser History
#include <bits/stdc++.h>
using namespace std;
class Node {
public:
    string website;
    Node* next;
    Node* prev;
    Node(string addr){
        website = addr;
        next = NULL;
        prev = NULL;
    }
};
class myDoublyList{
public:
    Node* head;
    Node* tail;
    Node* current;
    myDoublyList(){
        head = NULL;
        tail = NULL;
        current = NULL;
    }
    void append(string addr){
        Node* newNode = new Node(addr);
        if(!head){
            head = newNode;
            tail = newNode;
        } 
        else{
            tail->next = newNode;
            newNode->prev = tail;
            tail = newNode;
        }
    }
    Node* find(string addr){
        Node* temp = head;
        while(temp){
            if(temp->website == addr){
                return temp;
            }
            temp = temp->next;
        }
        return NULL;
    }
    string moveNext(){
        if(current && current->next){
            current = current->next;
            return current->website;
        }
        return "Not Available";
    }
    string movePrev(){
        if(current && current->prev){
            current = current->prev;
            return current->website;
        }
        return "Not Available";
    }
    string getCurrentAddress(){
        if(current){
            return current->website;
        } 
        else{
            return "Not Available";
        }
    }
};
int main(){
   myDoublyList dll;
    string address;
    while(cin >> address && address != "end"){
        dll.append(address);
    }
    dll.current = dll.head;
    int Q;
    cin >> Q;
    cin.ignore(); 
    string command;
    while (Q--){
        getline(cin, command);
        if(command.length()>6 && command[0] == 'v' && command[1] == 'i' &&
            command[2] == 's' && command[3] == 'i' && command[4] == 't' && command[5] == ' '){
            string target = "";
            for(size_t i=6;i<command.length();++i){
                target += command[i];
            }
            Node* node = dll.find(target);
            if (node){
                dll.current = node;
                cout << dll.getCurrentAddress() << endl;
            } 
            else{
                cout << "Not Available" << endl;
            }
        } 
        else if(command == "next"){
            cout << dll.moveNext() << endl;
        } 
        else if(command == "prev"){
            cout << dll.movePrev() << endl;
        }
    }
    return 0;
}
TASK04
Queries Again
#include <bits/stdc++.h>
using namespace std;
class Node{
public:
    int value;       
    Node* next;      
    Node* prev;      
    Node(int val){
        value = val;
        next = NULL;
        prev = NULL;
    }
};
class myDoublyList{
public:
    Node* head;  
    Node* tail;  
    int size;    
    myDoublyList(){
        head = NULL;
        tail = NULL;
        size = 0;
    }
    bool insertAt(int index, int value){
        if(index < 0 || index > size){
            return false;
        }
        Node* newNode = new Node(value);
        if(index == 0){ 
            newNode->next = head;
            if(head){
                head->prev = newNode;
            }
            head = newNode;
            if(size == 0){ 
                tail = newNode;
            }
        } 
        else if(index == size){ 
            newNode->prev = tail;
            if(tail){
                tail->next = newNode;
            }
            tail = newNode;
        } 
        else{ 
            Node* temp = head;
            for(int i = 0; i < index - 1; ++i){ 
                temp = temp->next;
            }
            newNode->next = temp->next;
            newNode->prev = temp;
            temp->next->prev = newNode;
            temp->next = newNode;
        }
        size++;
        return true;
    }
    void printLeftToRight(){
        cout << "L -> ";
        Node* current = head;
        while(current){
            cout << current->value << " ";
            current = current->next;
        }
        cout << endl;
    }
    void printRightToLeft(){
        cout << "R -> ";
        Node* current = tail;
        while(current){
            cout << current->value << " ";
            current = current->prev;
        }
        cout << endl;
    }
};
int main(){
    int Q;
    cin >> Q;
    myDoublyList dll; 
    while (Q--){
        int index, value;
        cin >> index >> value;
        if(dll.insertAt(index, value)){
            dll.printLeftToRight();
            dll.printRightToLeft();
        } 
        else{
            cout << "Invalid" << endl;
        }
    }
    return 0;
}
TASK05
Remember Previous Queries?
#include <bits/stdc++.h>
using namespace std;
int main() {
    int Q;
    cin >> Q;  
    list<int> myList;  
    while (Q--) {
        int X, V;
        cin >> X >> V;  
        if (X == 0) {  
            myList.push_front(V);
        } 
        else if (X == 1) {  
            myList.push_back(V);
        }
        else if(X == 2){
            if(V >= 0 && V < myList.size()){
                auto it = myList.begin();
                advance(it, V);
                myList.erase(it);
            }
        }
        cout << "L -> ";
        for (auto it = myList.begin(); it != myList.end(); ++it) {
            cout << *it << " ";
        }
        cout << endl;
        cout << "R -> ";
        for (auto it = myList.rbegin(); it != myList.rend(); ++it) {
            cout << *it << " ";
        }
        cout << endl;
    }

    return 0;
}
